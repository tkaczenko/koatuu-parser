/*
 * This file is generated by jOOQ.
 */
package io.github.tkaczenko.koatuuparser.entity.tables;


import io.github.tkaczenko.koatuuparser.entity.Indexes;
import io.github.tkaczenko.koatuuparser.entity.Keys;
import io.github.tkaczenko.koatuuparser.entity.Public;
import io.github.tkaczenko.koatuuparser.entity.tables.records.LocationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Location extends TableImpl<LocationRecord> {

    private static final long serialVersionUID = -220059746;

    /**
     * The reference instance of <code>public.location</code>
     */
    public static final Location LOCATION = new Location();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationRecord> getRecordType() {
        return LocationRecord.class;
    }

    /**
     * The column <code>public.location.id</code>.
     */
    public final TableField<LocationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.location.district</code>.
     */
    public final TableField<LocationRecord, String> DISTRICT = createField("district", org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.location.koatuu</code>.
     */
    public final TableField<LocationRecord, String> KOATUU = createField("koatuu", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.location.location_type</code>.
     */
    public final TableField<LocationRecord, String> LOCATION_TYPE = createField("location_type", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.location.region</code>.
     */
    public final TableField<LocationRecord, String> REGION = createField("region", org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.location.settlement</code>.
     */
    public final TableField<LocationRecord, String> SETTLEMENT = createField("settlement", org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * Create a <code>public.location</code> table reference
     */
    public Location() {
        this(DSL.name("location"), null);
    }

    /**
     * Create an aliased <code>public.location</code> table reference
     */
    public Location(String alias) {
        this(DSL.name(alias), LOCATION);
    }

    /**
     * Create an aliased <code>public.location</code> table reference
     */
    public Location(Name alias) {
        this(alias, LOCATION);
    }

    private Location(Name alias, Table<LocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Location(Name alias, Table<LocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Location(Table<O> child, ForeignKey<O, LocationRecord> key) {
        super(child, key, LOCATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DISTRICT_DISTRICT_IDX, Indexes.LOCATION_KOATUU_IDX, Indexes.LOCATION_PKEY, Indexes.LOCATION_REGION_IDX, Indexes.LOCATION_SETTLEMENT_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LocationRecord> getPrimaryKey() {
        return Keys.LOCATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LocationRecord>> getKeys() {
        return Arrays.<UniqueKey<LocationRecord>>asList(Keys.LOCATION_PKEY, Keys.LOCATION_KOATUU_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Location as(String alias) {
        return new Location(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Location as(Name alias) {
        return new Location(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(String name) {
        return new Location(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Name name) {
        return new Location(name, null);
    }
}
